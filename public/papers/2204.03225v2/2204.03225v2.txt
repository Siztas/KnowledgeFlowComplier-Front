标题：Explicit Feature Interaction-aware Graph Neural Networks

Graph neural networks are powerful methods to handle graph-structured data.
However, existing graph neural networks only learn higher-order feature interactions implicitly.
Thus, they cannot capture information that occurred in low-order feature interactions.
To overcome this problem, we propose Explicit Feature Interaction-aware Graph Neural Network (EFI-GNN), which explicitly learns arbitrary-order feature interactions.
EFI-GNN can jointly learn with any other graph neural network.
We demonstrate that the joint learning method always enhances performance on the various node classification tasks.
Furthermore, since EFI-GNN is inherently a linear model, we can interpret the prediction result of EFI-GNN.
With the computation rule, we can obtain an any-order feature’s effect on the decision.
By that, we visualize the effects of the first-order and second-order features as a form of a heatmap.

[图片: images\image_1.png]
图片说明: Figure 1.Feature interactions via hand-crafted features

Domain-specific feature engineering to learn feature interactions plays a significant role in machine learning systems(Wang
et al.,2017).
However, feature engineering requires expertise domain knowledge, much effort, and is time-consuming.
Several methods that automatically learn certain-order feature interactions have been proposed to address this problem(Wang
et al.,2017; Lian
et al.,2018; Kim et al.,2020a).
They show good performance in prediction problems such as recommendation(Lian
et al.,2018)and regression(Kim et al.,2020a).
However, they can only handle tabular data.

Recently, graph-structured data have been widely used in many fields such as citation networks(Kipf and Welling,2017), social networks(Fan
et al.,2019), and natural language processing(Huang
et al.,2019).
Therefore, graph representation learning has become a crucial task in machine learning.
Graph neural networks achieved great success in graph representation learning.
However, conventional graph neural networks only learn higher-order feature interactions implicitly, so they cannot capture information occurring in low-order feature interactions.

Interpreting the decision process of a machine learning model is essential to applying them to high-stakes domains.
Therefore, interpretable artificial intelligence (AI) has been actively studied in recent years(Agarwal et al.,2020).
However, most interpretable models can only learn first-order feature interactions and perform more poorly than complex non-interpretable models.

To address the issues mentioned above, we propose Explicit Feature Interaction-aware Graph Neural Network (EFI-GNN).
EFI-GNN explicitly learns certain-order feature interactions on graphs.
Specifically, each layer of EFI-GNN learns different feature interactions.
For example, the first and second layers of EFI-GNN learn second-order and third-order feature interactions, respectively.
Despite linearity, EFI-GNN does not show significant performance degradation against any other graph neural network on node classification.
Furthermore, EFI-GNN can jointly learn with other graph neural networks to simultaneously learn explicit and implicit feature interactions.
We demonstrate that the joint learning method achieved state-of-the-art results.
In addition, we visualize the first-order and second-order feature interactions learned by EFI-GNN as a form of a heatmap.

The major contributions of this paper are as follows:

EFI-GNN is a linear and interpretable model and explicitly learns feature interactions on graphs. Thus, we can know not only single features’ effects but also high-order features’ effects using EFI-GNN.

Despite linearity, EFI-GNN does not show any performance degradation against any other graph neural networks. It shows that explicitly learning feature interactions on graphs is effective.

EFI-GNN can jointly learn with other graph neural networks. We demonstrate that the joint learning method achieved state-of-the-art results.

We visualize the first-order and second-order feature interactions learned by EFI-GNN using heat maps.

Feature interaction is the effect of a feature combination on the prediction value.
The effect of one feature may depend on other features.
Thus, learning feature interactions helps improve the performance of a machine learning model.
Traditionally, hand-crafted features are widely used to learn feature interactions.
Figure1shows the linear model that learns three kinds of feature interactions via hand-crafted features.
The model can only learn first-order feature interactions but explicitly generated hand-crafted features allow to learn high-order feature interactions.
However, making hand-crafted features requires expertise domain knowledge, much effort, and is time-consuming.

Deep neural networks aggregate information of all features implicitly.
Thus, deep neural network models can learn higher-order feature interactions and achieve high performance.
However, they are uninterpretable and cannot capture information included in low-order feature interactions.

In recent years, several methods that can learn multiple feature interactions without hand-crafted features have been proposed(He and Chua,2017; He
et al.,2017; Kim et al.,2020b; Kim and Lee,2021).
Factorization Machine (FM)(Rendle,2010)combines linear regression and feature factorization models to simultaneously learn first-order and second-order feature interactions.
Deep neural networks can only learn implicit higher-order feature interactions.
Wide & Deep Learning(Cheng
et al.,2016)is a combination of linear regression and deep neural network models.
Thus, it can simultaneously learn explicit first-order and implicit higher-order feature interactions.
This strategy outperforms existing deep neural network methods.
DeepFM(Guo
et al.,2017)is a combination of FM and deep neural network models.
However, existing explicit methods are restricted.
They can only learn fixed-order feature interactions.
To overcome this problem, multi-layer linear networks have been proposed.
Cross Network(Wang
et al.,2017)applies feature crossing to each layer instead of an activation function.
Thus, it can explicitly learn feature interactions.
The layer depth determines the order of interactions.
Compressed Interaction Network (CIN)(Lian
et al.,2018)and the explicit component of eXtreme Interaction Network (XIN)(Kim et al.,2020a)are improvements of Cross Network with the vector-wise operations.

Graph neural networks are a special form of deep neural networks to handle graph-structured data.
Graph Neural Network (GNN)(Scarselli et al.,2009)extends Recurrent Neural Network (RNN)(Rumelhart
et al.,1986)to make them applicable to more general graphs such as undirected cyclic graphs.
Gated Graph Neural Network (GGNN)(Li
et al.,2016)improve GNN using Gated Recurrent Unit (GRU)(Cho et al.,2014).
These RNN-based graph neural networks can be classified into Recurrent Graph Neural Networks (RGNNs).
Planetoid(Yang
et al.,2016)is a semi-supervised node embedding framework, which is trained to simultaneously predict node class labels and sub-graph contexts using a neural network.
Recently, Graph Convolutional Network (GCN)(Kipf and Welling,2017)and its variants(Hamilton
et al.,2017; Veličković et al.,2018)have achieved great success in node embedding task.
One problem with spectral methods like GCN is over-smoothing.
To alleviate the over-smoothing problem and train a deep GCN, several methods using residual connections have been proposed(Li
et al.,2019b,2020).
Jumping Knowledge Network (JKNet)(Xu et al.,2018)use the results of all layers of GCN to predict and alleviate the over-smoothing problem.
Sub-graph sampling methods for fast learning and inference of GCN have been proposed(Chen
et al.,2018; Huang
et al.,2018).
Simple Graph Convolutional Network (SGC)(Wu et al.,2019)are a straightforward and linear version of GCN using powers of the adjacency matrix.
Link prediction methods for bipartite graphs using graph neural networks have been proposed(Berg
et al.,2017; Zhang and Chen,2020).
Graph Transformers(Yun
et al.,2019)automatically generate meta-paths and effectively deal with heterogeneous graphs.
All methods mentioned above (except SGCs) implicitly aggregate feature information.
Thus, they can only learn higher-order feature interactions and cannot capture the information occurring in low-order feature interactions.

Recently, several methods for learning feature interaction via graph neural networks have been proposed(Li
et al.,2019a,2021; Liu
et al.,2021; Zheng
et al.,2021).
These methods model features as a graph and learn edge weight on feature graphs using graph neural networks.
The learned edge weights indicate interactions of features.
However, they cannot handle graph-structured data such as citation networks.
FI-GNN(Ding
et al.,2019)is a joint learning method of graph neural network and feature factorization module.
However, the feature factorization module cannot directly handle graph-structured data and only learn second-order feature interactions.
Our proposed EFI-GNN can directly handle graph-structured data and learn arbitrary-order feature interactions.

[图片: images\image_2.png]
图片说明: Figure 2.EFI-GNN layer

This section presents Explicit Feature Interaction-aware Graph Neural Network (EFI-GNN) and the joint learning method to combine EFI-GNN with another graph neural network.
In addition, we show that EFI-GNN is an interpretable model.

EFI-GNN consists of multiple layers, and each layer has the feature crossing term.
It allows EFI-GNN to learn high-order feature interactions.
We need the sum of first-order feature interactions before making high-order feature interactions.
The sum of first-order feature interactions are defined as follows:

whereX(i​n​i​t)superscriptX𝑖𝑛𝑖𝑡\textbf{X}^{(init)}is the raw feature matrix, andW(0)superscriptW0\textbf{W}^{(0)}is the weight matrix.
An EFI-GNN layer is defined as follows:

whereA^=D~−1/2​A~​D~−1/2^Asuperscript~D12~Asuperscript~D12\hat{\textbf{A}}=\tilde{\textbf{D}}^{-1/2}\tilde{\textbf{A}}\tilde{\textbf{D}}^{-1/2},A~=A+I~AAI\tilde{\textbf{A}}=\textbf{A}+\textbf{I},Ais the adjacency matrix,D~~D\tilde{\textbf{D}}is the degree matrix ofA~~A\tilde{\textbf{A}},W(l)superscriptW𝑙\textbf{W}^{(l)}is the trainable weight matrix inlt​hsuperscript𝑙𝑡ℎl^{th}layer, and⊙direct-product\odotis the Hadamard product.
The adjacency matrix is multiplied to aggregate neighbor nodes’ information, and the sum of first-order feature interactions is element-wise multiplied again in each layer.
Therefore, EFI-GNN can learn the next-order feature interactions considering neighbor nodes’ feature interactions as the number of layers increases.
Note that an EFI-GNN layer has no non-linear transformation like activation function.
Thus, our EFI-GNN is a linear network.
Figure2shows the architecture of an EFI-GNN layer.

We show vector-level representation of an EFI-GNN layer to show how the layer learns feature interactions.
In eq.1,X(0)superscriptX0\textbf{X}^{(0)}is the linear transformation of the raw features.
In other words,X(0)superscriptX0\textbf{X}^{(0)}indicates the sum of first-order feature interactions.
Thus, we can rewrite eq.1in vector level as follows:

wherev𝑣vis the node index, andM𝑀Mis the number of raw features.Xv,m(i​n​i​t)​W:,m(0)subscriptsuperscriptX𝑖𝑛𝑖𝑡𝑣𝑚subscriptsuperscriptW0:𝑚\textbf{X}^{(init)}_{v,m}\textbf{W}^{(0)}_{:,m}indicates first-order feature interactions ofmt​hsuperscript𝑚𝑡ℎm^{th}feature invt​hsuperscript𝑣𝑡ℎv^{th}node.
We can know thatXv(0)subscriptsuperscriptX0𝑣\textbf{X}^{(0)}_{v}is the sum of feature interactions through eq.3.
In eq.2,X(l)superscriptX𝑙\textbf{X}^{(l)}is the linear transformation ofX(l−1)superscriptX𝑙1\textbf{X}^{(l-1)}with the neighbor aggregation and feature crossing.
The neighbor aggregation allows an EFI-GNN layer to consider neighbor nodes’ information, and the feature crossing allows an EFI-GNN layer to learn next-order feature interactions.
We can rewrite eq.2in vector level as follows:

whereK𝐾Kis the embedding size.Xi,k(l−1)​W:,k(l)superscriptsubscriptX𝑖𝑘𝑙1subscriptsuperscriptW𝑙:𝑘\textbf{X}_{i,k}^{(l-1)}\textbf{W}^{(l)}_{:,k}indicates the sum oflt​hsuperscript𝑙𝑡ℎl^{th}-order feature interactions init​hsuperscript𝑖𝑡ℎi^{th}node.
The sum of first-order feature interactions is element-wise multiplied tolt​hsuperscript𝑙𝑡ℎl^{th}-order feature interactions.
Thus, we can know thatX(l)superscript𝑋𝑙X^{(l)}is the(l+1)t​hsuperscript𝑙1𝑡ℎ(l+1)^{th}-order feature interactions through eq.4.

[图片: images\image_3.png]
图片说明: Figure 3.The overall architecture of EFI-GNN

The final output layer of EFI-GNN is defined as follows:

whereL𝐿Lis the number of layers, and∥parallel-to\parallelis the concatenation operator.
Each layer of EFI-GNN learns different feature interactions.
EFI-GNN predicts the output value with these rich feature interactions to improve performance.
Algorithm1shows the pseudo-code of forward propagation of EFI-GNN.
Figure3shows the overall architecture of EFI-GNN.

Our EFI-GNN can jointly learn with another graph neural network.
We present a joint learning method to learn explicit and implicit feature interactions simultaneously.
In EFI-GNN, each layer learns different feature interactions.
In existing graph neural networks, each layer learns higher-order feature interactions, but the upper layer can capture the complex pattern of the data more than the lower layer.
Both EFI-GNN and graph neural networks capture the different data patterns in each layer.
Therefore, using the results of all layers of EFI-GNN and graph neural networks is helpful for prediction performance.
We define the final representation matrix of EFI-GNN as follows:

where∥parallel-to\parallelis the concatenation operator andLe​f​isubscript𝐿𝑒𝑓𝑖L_{efi}is the number of layers of EFI-GNN.
Similarly, we define the final representation matrix of a graph neural network as follows:

whereLg​n​nsubscript𝐿𝑔𝑛𝑛L_{gnn}is the number of layers of a graph neural network.
The final output layer of the joint learning method is defined as follows:

whereW(o​u​t)superscriptW𝑜𝑢𝑡\textbf{W}^{(out)}is the trainable output matrix.

Input:

normalized adjacency matrixA^^A\hat{\textbf{A}}

raw feature matrixX(i​n​i​t)superscriptX𝑖𝑛𝑖𝑡\textbf{X}^{(init)}

target labelsY

number of layersL𝐿L

Parameter:

trainable weightsW(0)superscriptW0\textbf{W}^{(0)},…,W(L)superscriptW𝐿\textbf{W}^{(L)},W(o​u​t)superscriptW𝑜𝑢𝑡\textbf{W}^{(out)}

[图片: images\image_4.png]
图片说明: (a)EFI-GNN∗

[图片: images\image_5.png]
图片说明: (a)EFI-GNN∗

[图片: images\image_6.png]
图片说明: (a)EFI-GNN∗

Since EFI-GNN is an inherently linear model, we can obtain the value of feature interactions in a layer if the layer is connected to the output layer.
It shows that our EFI-GNN is an interpretable model.
Interestingly, most interpretable or explainable methods sacrifice their performance for interpretability or explainability, while EFI-GNN is not.
EFI-GNN shows almost the same performance as Graph Convolutional Network (GCN).
Furthermore, combining EFI-GNN with another graph neural network can make higher performance.
We define the process for obtaining a feature interaction value.
The value of a first-order feature interaction is defined as follows:

wherean,i(1)subscriptsuperscripta1𝑛𝑖\textbf{a}^{(1)}_{n,i}is the representation vector of the first-order featurei𝑖iin the noden𝑛n,Wi(0)subscriptsuperscriptW0𝑖\textbf{W}^{(0)}_{i}is the embedding weight vector of the featurei𝑖i,W:u,c(o​u​t)subscriptsuperscriptW𝑜𝑢𝑡:absent𝑢𝑐\textbf{W}^{(out)}_{:u,c}is the output weight vector of the classc𝑐cindexed by:u:absent𝑢:u,u𝑢uis the number of units in the layer,an,i(1)subscriptsuperscripta1𝑛𝑖\textbf{a}^{(1)}_{n,i}indicates the representation vector of the featurei𝑖iin the noden𝑛n, andec,n,i(1)superscriptsubscript𝑒𝑐𝑛𝑖1e_{c,n,i}^{(1)}indicates the direct effect of the first-order featurei𝑖iin the noden𝑛nfor the classc𝑐c.
Similarly, the value of a second-order feature is defined as follows:

wherean,i,j(2)superscriptsubscripta𝑛𝑖𝑗2\textbf{a}_{n,i,j}^{(2)}is the representation vector of the second-order featurei×j𝑖𝑗i\times j, andec,n,i,jsubscript𝑒𝑐𝑛𝑖𝑗e_{c,n,i,j}is the direct effect of the second-order featurei×j𝑖𝑗i\times jfor the classc𝑐c.
Therefore, we can generalize the above equations as follows:

We compare the proposed EFI-GNN and the joint learning method with other state-of-the-art models using three representative citation network datasets, Cora, Citeseer, and PubMed.
In addition, we examine whether explicit feature interactions learned by EFI-GNN are effective for node embeddings using two Open Graph Benchmark (OGB)(Hu et al.,2020)datasets.
Table1shows the statistics of the experimental datasets.
These five datasets are citation network datasets.
The goal of each dataset is to predict the class label of the nodes (i.e.paper).
Especially, ogbn-mag is a heterogeneous network dataset.
Thus, we made the homogeneous network using only (paper, cites, paper) relationships.
Cora, CiteSeer, PubMed, and obgn-mag are undirected networks, and ogbn-arxiv is a directed network.
Their features are the representations of the words.
In Cora and CiteSeer, the features of a node represent the zero/one encoding vector indicating the absent/present words.
In PubMed, the features of a node represent the TF/IDF score vector of the words.
In ogbn-arxiv and obgn-mag, the features of a node represent the average of the word2vec vectors of the present words.
All experimental datasets are publicly open.
The training/validation/test data for Cora, CiteSeer, and PubMed are split as the same scenario as(Chen
et al.,2018), and training/validation/test data for ogbn-arxiv and ogbn-mag are split as the same scenario as public OGB test.

We implemented the proposed EFI-GNN and the joint learning method using PyTorch(Paszke
et al.,2019)and PyTorch Geometric(Fey and Lenssen,2019).
We use L2 penalty and Dropout(Srivastava et al.,2014)for all datasets.
Especially, we use Batch Normalization(Ioffe and Szegedy,2015)for PubMed, ogbn-arxiv and ogbn-mag additionally.
For the fast approximation, we train the model with Residual Connections(He
et al.,2016)on PubMed.
For Cora, CiteSeer and PubMed, we optimize the other hyper-parameters such as learning rate using the greedy search algorithm.
Only the validation data was used for hyper-parameter optimization.
For a fair comparison, we used the same model structure and hyper-parameter setting on ogbn-arxiv and ogbn-mag across all models.
The model has trained over 200 epochs on Cora, CiteSeer, and PubMed, and 1000 epochs on ogbn-arxiv and ogbn-mag.
We use Cross-Entropy as the loss function and optimize the trainable parameters using Adam optimizer.

We compare the EFI-GNN with existing state-of-the-art methods using three representative citation network datasets, Cora, CiteSeer, and PubMed.
Table2shows the test accuracies of each model.
The reported accuracies of the existing graph neural networks are reproduced.
We report the average accuracies of experimental methods with ten random seeds.
All experimental methods concatenate all layers to make predictions.
Although our EFI-GNN is a linear model, it shows almost matched performance with GCN.
In addition, the joint learning method of GCN and EFI-GNN achieved state-of-the-art results in CiteSeer and PubMed.
The joint learning method of GCNII with EFI-GNN achieved the state-of-the-art result in Cora.
It shows that the feature interactions learned by EFI-GNN are effective.
Note that we did not use any sampling method during the training and prediction phase of the experiment models.

We conduct additional experiments using two OGC datasets to examine whether explicit feature interactions learned by EFI-GNN are effective.
Table3shows the test accuracies of the experimental methods.
GCN∗and EFI-GNN∗only use the last layer to make predictions and learn implicit higher-order and explicit higher-order feature interactions.
GCN and EFI-GNN use the concatenate of all layers to make predictions and respectively learn multiple implicit higher-order and explicit various-orders feature interactions.
GCN & EFI-GNN is the joint learning method of GCN and EFI-GNN.
It can simultaneously learn multiple implicit higher-order and explicit various-orders feature interactions.
Figure4shows the brief architecture of EFI-GNN∗, EFI-GNN, and GCN & EFI-GNN
For a fair comparison, we use GCN & GCN, which is the joint learning method of two GCN, and EFI-GNN & EFI-GNN, which is the joint learning method of two EFI-GNNs.
They have the same number of trainable parameters as GCN & EFI-GNN.
GCN and EFI-GNN outperform GCN∗and EFI-GNN∗, respectively.
It shows that simultaneously learning multiple feature interactions is effective for node representation learning.
Furthermore, GCN & EFI-GNN outperforms GCN & GCN and EFI-GNN & EFI-GNN.
It indicates that simultaneously learning both explicit and implicit feature interactions is more effective than learning only explicit or implicit feature interactions.

[图片: images\image_7.png]
图片说明: (a)first-order features

[图片: images\image_8.png]
图片说明: (a)first-order features

Our EFI-GNN is a linear and interpretable model.
Thus, we can compute arbitrary-order feature interactions learned by EFI-GNN.
The computed value of a feature interaction indicates the direct effect of a feature on the prediction value.
We visualize the first-order and second-order feature interactions of the node111for the class111in the Cora dataset.
Figure5shows the feature interaction value of the first-order and second-order features.
The node has nine activated features.
Thus, we only visualize the interactions for these nine features.
In the figure, a red cell indicates a feature with a positive effect, and a blue cell indicates a feature with a negative effect.
The positive features increase the probability that the node111belongs to the class111.
Contrary, the negative features decrease the probability that the node111belongs to the class111.

We proposed a novel graph-based feature interaction method named EFI-GNN.
EFI-GNN can learn arbitrary-order feature interactions explicitly without any manually crafted features on graphs and is a linear and interpretable model.
Although EFI-GNN is a linear model, it does not shows performance degradation compared to Graph Convolutional Network (GCN) on node classification.
Furthermore, EFI-GNN can jointly learn with another graph neural network.
The join learning method achieved state-of-the-art results.
We visualized the first-order and second-order feature interactions learned by EFI-GNN.
The value of any-order feature interaction can be computed with our interpretability computation rule.
Our EFI-GNN can alleviate efforts about domain-specific feature engineering.
Although we have only experimented on node classification tasks, we expect EFI-GNN will show performance enhancement in fields that need expert domain-specific feature engineering, such as recommendation.
High-stakes domains such as healthcare and bioinformatics need interpretable machine learning models.
We can obtain the effects of any-order features with EFI-GNN.
The interpretability of EFI-GNN can help apply machine learning models to high-stakes domains.

We optimize the hyper-parameters of experimental models with the greedy search algorithm.
Table4shows the hyper-parameter settings on Cora, CiteSeer, and PubMed.
For a fair comparison, we use the same hyper-parameter setting on OGB datasets.
Table5shows the hyper-parameter setting on OGB datasets.

We showed that our EFI-GNN is an interpretable AI model and visualized the feature interactions.
We additionally visualize first-order and second-order feature interactions with different hyper-parameter settings.
Figure6, Figure7, and Figure8are the visualizations of the first-order feature interactions on the different number of units, layers, and different seeds, respectively.
The first-order feature interactions have the same trend.
It indicates that EFI-GNN pays attention to the same features across the different hyper-parameter settings and shows EFI-GNN is reliable.
Figure9is the visualization of the second-order feature interactions on the different numbers of units.
Unlike first-order feature interactions, it is hard to find any patterns or trends in second-order feature interactions.
We anticipate that the node aggregation in an EFI-GNN layer causes this problem.
An EFI-GNN layer aggregates the features of neighboring nodes.
This may make it more challenging to capture stable patterns of feature interactions.
Our future work is to find out exactly why this problem is caused.

[图片: images\image_9.png]
图片说明: (a)Units 32

[图片: images\image_10.png]
图片说明: (a)Units 32

[图片: images\image_11.png]
图片说明: (a)Units 32

[图片: images\image_12.png]
图片说明: (a)Units 32

[图片: images\image_13.png]
图片说明: (a)Units 32

[图片: images\image_14.png]
图片说明: (a)Layers 1

[图片: images\image_15.png]
图片说明: (a)Layers 1

[图片: images\image_16.png]
图片说明: (a)Layers 1

[图片: images\image_17.png]
图片说明: (a)Layers 1

[图片: images\image_18.png]
图片说明: (a)Layers 1

[图片: images\image_19.png]
图片说明: (a)Seed 1

[图片: images\image_20.png]
图片说明: (a)Seed 1

[图片: images\image_21.png]
图片说明: (a)Seed 1

[图片: images\image_22.png]
图片说明: (a)Seed 1

[图片: images\image_23.png]
图片说明: (a)Seed 1

[图片: images\image_24.png]
图片说明: (a)Units 32

[图片: images\image_25.03225v2]
图片说明: (a)Units 32

[图片: images\image_26.png]
图片说明: (a)Units 32

[图片: images\image_27.png]
图片说明: (a)Units 32

[图片: images\image_28.png]
图片说明: (a)Units 32

[图片: images\image_29.png]

[图片: images\image_30.png]

